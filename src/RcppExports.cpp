// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// scan_allele_info
Rcpp::IntegerMatrix scan_allele_info(Rcpp::StringVector allele_info);
RcppExport SEXP _poolfstat_scan_allele_info(SEXP allele_infoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type allele_info(allele_infoSEXP);
    rcpp_result_gen = Rcpp::wrap(scan_allele_info(allele_info));
    return rcpp_result_gen;
END_RCPP
}
// extract_vscan_counts
Rcpp::NumericMatrix extract_vscan_counts(Rcpp::StringMatrix vcf_data, int ad_idx, int rd_idx);
RcppExport SEXP _poolfstat_extract_vscan_counts(SEXP vcf_dataSEXP, SEXP ad_idxSEXP, SEXP rd_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringMatrix >::type vcf_data(vcf_dataSEXP);
    Rcpp::traits::input_parameter< int >::type ad_idx(ad_idxSEXP);
    Rcpp::traits::input_parameter< int >::type rd_idx(rd_idxSEXP);
    rcpp_result_gen = Rcpp::wrap(extract_vscan_counts(vcf_data, ad_idx, rd_idx));
    return rcpp_result_gen;
END_RCPP
}
// extract_nonvscan_counts
Rcpp::NumericMatrix extract_nonvscan_counts(Rcpp::StringMatrix vcf_data, Rcpp::IntegerVector nb_all, int ad_idx, int min_rc);
RcppExport SEXP _poolfstat_extract_nonvscan_counts(SEXP vcf_dataSEXP, SEXP nb_allSEXP, SEXP ad_idxSEXP, SEXP min_rcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringMatrix >::type vcf_data(vcf_dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type nb_all(nb_allSEXP);
    Rcpp::traits::input_parameter< int >::type ad_idx(ad_idxSEXP);
    Rcpp::traits::input_parameter< int >::type min_rc(min_rcSEXP);
    rcpp_result_gen = Rcpp::wrap(extract_nonvscan_counts(vcf_data, nb_all, ad_idx, min_rc));
    return rcpp_result_gen;
END_RCPP
}
// extract_allele_names
Rcpp::StringMatrix extract_allele_names(Rcpp::StringVector allele_info, Rcpp::IntegerMatrix allele_idx);
RcppExport SEXP _poolfstat_extract_allele_names(SEXP allele_infoSEXP, SEXP allele_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type allele_info(allele_infoSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type allele_idx(allele_idxSEXP);
    rcpp_result_gen = Rcpp::wrap(extract_allele_names(allele_info, allele_idx));
    return rcpp_result_gen;
END_RCPP
}
// find_indelneighbor_idx
Rcpp::IntegerVector find_indelneighbor_idx(Rcpp::StringVector contig, Rcpp::IntegerVector position, Rcpp::IntegerVector indels_idx, int min_dist, Rcpp::IntegerVector indels_size);
RcppExport SEXP _poolfstat_find_indelneighbor_idx(SEXP contigSEXP, SEXP positionSEXP, SEXP indels_idxSEXP, SEXP min_distSEXP, SEXP indels_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type contig(contigSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type position(positionSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indels_idx(indels_idxSEXP);
    Rcpp::traits::input_parameter< int >::type min_dist(min_distSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indels_size(indels_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(find_indelneighbor_idx(contig, position, indels_idx, min_dist, indels_size));
    return rcpp_result_gen;
END_RCPP
}
// compute_Ddenom
Rcpp::NumericVector compute_Ddenom(Rcpp::NumericMatrix snpQ2, Rcpp::IntegerMatrix f2idx, Rcpp::LogicalVector verbose);
RcppExport SEXP _poolfstat_compute_Ddenom(SEXP snpQ2SEXP, SEXP f2idxSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type snpQ2(snpQ2SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type f2idx(f2idxSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_Ddenom(snpQ2, f2idx, verbose));
    return rcpp_result_gen;
END_RCPP
}
// compute_Q_bjmeans
Rcpp::NumericVector compute_Q_bjmeans(Rcpp::NumericMatrix snpQ, Rcpp::IntegerVector snp_bj_id, Rcpp::LogicalVector verbose);
RcppExport SEXP _poolfstat_compute_Q_bjmeans(SEXP snpQSEXP, SEXP snp_bj_idSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type snpQ(snpQSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type snp_bj_id(snp_bj_idSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_Q_bjmeans(snpQ, snp_bj_id, verbose));
    return rcpp_result_gen;
END_RCPP
}
// compute_F2_bjmeans
Rcpp::NumericVector compute_F2_bjmeans(Rcpp::NumericMatrix snpQ1, Rcpp::NumericMatrix snpQ2, Rcpp::IntegerMatrix q1_idx, Rcpp::IntegerVector snp_bj_id, Rcpp::LogicalVector verbose);
RcppExport SEXP _poolfstat_compute_F2_bjmeans(SEXP snpQ1SEXP, SEXP snpQ2SEXP, SEXP q1_idxSEXP, SEXP snp_bj_idSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type snpQ1(snpQ1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type snpQ2(snpQ2SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type q1_idx(q1_idxSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type snp_bj_id(snp_bj_idSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_F2_bjmeans(snpQ1, snpQ2, q1_idx, snp_bj_id, verbose));
    return rcpp_result_gen;
END_RCPP
}
// compute_Ddenom_bjmeans
Rcpp::NumericVector compute_Ddenom_bjmeans(Rcpp::NumericMatrix snpQ2, Rcpp::IntegerMatrix f2idx, Rcpp::IntegerVector snp_bj_id, Rcpp::LogicalVector verbose);
RcppExport SEXP _poolfstat_compute_Ddenom_bjmeans(SEXP snpQ2SEXP, SEXP f2idxSEXP, SEXP snp_bj_idSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type snpQ2(snpQ2SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type f2idx(f2idxSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type snp_bj_id(snp_bj_idSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_Ddenom_bjmeans(snpQ2, f2idx, snp_bj_id, verbose));
    return rcpp_result_gen;
END_RCPP
}
// compute_H1
Rcpp::NumericMatrix compute_H1(Rcpp::IntegerMatrix refcount, Rcpp::IntegerMatrix totcount, int nblocks, Rcpp::IntegerVector block_id, Rcpp::LogicalVector verbose);
RcppExport SEXP _poolfstat_compute_H1(SEXP refcountSEXP, SEXP totcountSEXP, SEXP nblocksSEXP, SEXP block_idSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type refcount(refcountSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type totcount(totcountSEXP);
    Rcpp::traits::input_parameter< int >::type nblocks(nblocksSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type block_id(block_idSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_H1(refcount, totcount, nblocks, block_id, verbose));
    return rcpp_result_gen;
END_RCPP
}
// compute_Q2
Rcpp::NumericMatrix compute_Q2(Rcpp::IntegerMatrix refcount, Rcpp::IntegerMatrix totcount, int nblocks, Rcpp::IntegerVector block_id, Rcpp::LogicalVector verbose);
RcppExport SEXP _poolfstat_compute_Q2(SEXP refcountSEXP, SEXP totcountSEXP, SEXP nblocksSEXP, SEXP block_idSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type refcount(refcountSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type totcount(totcountSEXP);
    Rcpp::traits::input_parameter< int >::type nblocks(nblocksSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type block_id(block_idSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_Q2(refcount, totcount, nblocks, block_id, verbose));
    return rcpp_result_gen;
END_RCPP
}
// compute_F3fromF2
Rcpp::NumericMatrix compute_F3fromF2(Rcpp::NumericVector F2val, Rcpp::NumericVector Hval, int npops);
RcppExport SEXP _poolfstat_compute_F3fromF2(SEXP F2valSEXP, SEXP HvalSEXP, SEXP npopsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type F2val(F2valSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Hval(HvalSEXP);
    Rcpp::traits::input_parameter< int >::type npops(npopsSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_F3fromF2(F2val, Hval, npops));
    return rcpp_result_gen;
END_RCPP
}
// compute_F3fromF2samples
Rcpp::NumericMatrix compute_F3fromF2samples(Rcpp::NumericMatrix blockF2, Rcpp::NumericMatrix blockHet, int npops, Rcpp::LogicalVector verbose);
RcppExport SEXP _poolfstat_compute_F3fromF2samples(SEXP blockF2SEXP, SEXP blockHetSEXP, SEXP npopsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type blockF2(blockF2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type blockHet(blockHetSEXP);
    Rcpp::traits::input_parameter< int >::type npops(npopsSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_F3fromF2samples(blockF2, blockHet, npops, verbose));
    return rcpp_result_gen;
END_RCPP
}
// generateF3names
Rcpp::StringMatrix generateF3names(Rcpp::StringVector popnames);
RcppExport SEXP _poolfstat_generateF3names(SEXP popnamesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type popnames(popnamesSEXP);
    rcpp_result_gen = Rcpp::wrap(generateF3names(popnames));
    return rcpp_result_gen;
END_RCPP
}
// compute_F4fromF2
Rcpp::NumericVector compute_F4fromF2(Rcpp::NumericVector F2val, int npops);
RcppExport SEXP _poolfstat_compute_F4fromF2(SEXP F2valSEXP, SEXP npopsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type F2val(F2valSEXP);
    Rcpp::traits::input_parameter< int >::type npops(npopsSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_F4fromF2(F2val, npops));
    return rcpp_result_gen;
END_RCPP
}
// compute_F4fromF2samples
Rcpp::NumericMatrix compute_F4fromF2samples(Rcpp::NumericMatrix blockF2, int npops, Rcpp::LogicalVector verbose);
RcppExport SEXP _poolfstat_compute_F4fromF2samples(SEXP blockF2SEXP, SEXP npopsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type blockF2(blockF2SEXP);
    Rcpp::traits::input_parameter< int >::type npops(npopsSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_F4fromF2samples(blockF2, npops, verbose));
    return rcpp_result_gen;
END_RCPP
}
// compute_F4DfromF2samples
Rcpp::NumericMatrix compute_F4DfromF2samples(Rcpp::NumericMatrix blockF2, Rcpp::NumericMatrix blockDenom, int npops, Rcpp::LogicalVector verbose);
RcppExport SEXP _poolfstat_compute_F4DfromF2samples(SEXP blockF2SEXP, SEXP blockDenomSEXP, SEXP npopsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type blockF2(blockF2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type blockDenom(blockDenomSEXP);
    Rcpp::traits::input_parameter< int >::type npops(npopsSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_F4DfromF2samples(blockF2, blockDenom, npops, verbose));
    return rcpp_result_gen;
END_RCPP
}
// compute_blockDdenom
Rcpp::NumericMatrix compute_blockDdenom(Rcpp::IntegerMatrix refcount, Rcpp::IntegerMatrix totcount, int nblocks, Rcpp::IntegerVector block_id, Rcpp::LogicalVector verbose);
RcppExport SEXP _poolfstat_compute_blockDdenom(SEXP refcountSEXP, SEXP totcountSEXP, SEXP nblocksSEXP, SEXP block_idSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type refcount(refcountSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type totcount(totcountSEXP);
    Rcpp::traits::input_parameter< int >::type nblocks(nblocksSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type block_id(block_idSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_blockDdenom(refcount, totcount, nblocks, block_id, verbose));
    return rcpp_result_gen;
END_RCPP
}
// generateF4names
Rcpp::StringMatrix generateF4names(Rcpp::StringVector popnames);
RcppExport SEXP _poolfstat_generateF4names(SEXP popnamesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type popnames(popnamesSEXP);
    rcpp_result_gen = Rcpp::wrap(generateF4names(popnames));
    return rcpp_result_gen;
END_RCPP
}
// compute_QmatfromF2samples
Rcpp::NumericMatrix compute_QmatfromF2samples(Rcpp::NumericMatrix blockF2, int npops, Rcpp::LogicalVector verbose);
RcppExport SEXP _poolfstat_compute_QmatfromF2samples(SEXP blockF2SEXP, SEXP npopsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type blockF2(blockF2SEXP);
    Rcpp::traits::input_parameter< int >::type npops(npopsSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_QmatfromF2samples(blockF2, npops, verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_poolfstat_scan_allele_info", (DL_FUNC) &_poolfstat_scan_allele_info, 1},
    {"_poolfstat_extract_vscan_counts", (DL_FUNC) &_poolfstat_extract_vscan_counts, 3},
    {"_poolfstat_extract_nonvscan_counts", (DL_FUNC) &_poolfstat_extract_nonvscan_counts, 4},
    {"_poolfstat_extract_allele_names", (DL_FUNC) &_poolfstat_extract_allele_names, 2},
    {"_poolfstat_find_indelneighbor_idx", (DL_FUNC) &_poolfstat_find_indelneighbor_idx, 5},
    {"_poolfstat_compute_Ddenom", (DL_FUNC) &_poolfstat_compute_Ddenom, 3},
    {"_poolfstat_compute_Q_bjmeans", (DL_FUNC) &_poolfstat_compute_Q_bjmeans, 3},
    {"_poolfstat_compute_F2_bjmeans", (DL_FUNC) &_poolfstat_compute_F2_bjmeans, 5},
    {"_poolfstat_compute_Ddenom_bjmeans", (DL_FUNC) &_poolfstat_compute_Ddenom_bjmeans, 4},
    {"_poolfstat_compute_H1", (DL_FUNC) &_poolfstat_compute_H1, 5},
    {"_poolfstat_compute_Q2", (DL_FUNC) &_poolfstat_compute_Q2, 5},
    {"_poolfstat_compute_F3fromF2", (DL_FUNC) &_poolfstat_compute_F3fromF2, 3},
    {"_poolfstat_compute_F3fromF2samples", (DL_FUNC) &_poolfstat_compute_F3fromF2samples, 4},
    {"_poolfstat_generateF3names", (DL_FUNC) &_poolfstat_generateF3names, 1},
    {"_poolfstat_compute_F4fromF2", (DL_FUNC) &_poolfstat_compute_F4fromF2, 2},
    {"_poolfstat_compute_F4fromF2samples", (DL_FUNC) &_poolfstat_compute_F4fromF2samples, 3},
    {"_poolfstat_compute_F4DfromF2samples", (DL_FUNC) &_poolfstat_compute_F4DfromF2samples, 4},
    {"_poolfstat_compute_blockDdenom", (DL_FUNC) &_poolfstat_compute_blockDdenom, 5},
    {"_poolfstat_generateF4names", (DL_FUNC) &_poolfstat_generateF4names, 1},
    {"_poolfstat_compute_QmatfromF2samples", (DL_FUNC) &_poolfstat_compute_QmatfromF2samples, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_poolfstat(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
