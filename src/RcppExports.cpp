// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// scan_allele_info
Rcpp::IntegerMatrix scan_allele_info(Rcpp::StringVector allele_info);
RcppExport SEXP _poolfstat_scan_allele_info(SEXP allele_infoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type allele_info(allele_infoSEXP);
    rcpp_result_gen = Rcpp::wrap(scan_allele_info(allele_info));
    return rcpp_result_gen;
END_RCPP
}
// extract_vscan_counts
Rcpp::NumericMatrix extract_vscan_counts(Rcpp::StringMatrix vcf_data, int ad_idx, int rd_idx);
RcppExport SEXP _poolfstat_extract_vscan_counts(SEXP vcf_dataSEXP, SEXP ad_idxSEXP, SEXP rd_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringMatrix >::type vcf_data(vcf_dataSEXP);
    Rcpp::traits::input_parameter< int >::type ad_idx(ad_idxSEXP);
    Rcpp::traits::input_parameter< int >::type rd_idx(rd_idxSEXP);
    rcpp_result_gen = Rcpp::wrap(extract_vscan_counts(vcf_data, ad_idx, rd_idx));
    return rcpp_result_gen;
END_RCPP
}
// extract_nonvscan_counts
Rcpp::NumericMatrix extract_nonvscan_counts(Rcpp::StringMatrix vcf_data, Rcpp::IntegerVector nb_all, int ad_idx, int min_rc);
RcppExport SEXP _poolfstat_extract_nonvscan_counts(SEXP vcf_dataSEXP, SEXP nb_allSEXP, SEXP ad_idxSEXP, SEXP min_rcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringMatrix >::type vcf_data(vcf_dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type nb_all(nb_allSEXP);
    Rcpp::traits::input_parameter< int >::type ad_idx(ad_idxSEXP);
    Rcpp::traits::input_parameter< int >::type min_rc(min_rcSEXP);
    rcpp_result_gen = Rcpp::wrap(extract_nonvscan_counts(vcf_data, nb_all, ad_idx, min_rc));
    return rcpp_result_gen;
END_RCPP
}
// extract_allele_names
Rcpp::StringMatrix extract_allele_names(Rcpp::StringVector allele_info, Rcpp::IntegerMatrix allele_idx);
RcppExport SEXP _poolfstat_extract_allele_names(SEXP allele_infoSEXP, SEXP allele_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type allele_info(allele_infoSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type allele_idx(allele_idxSEXP);
    rcpp_result_gen = Rcpp::wrap(extract_allele_names(allele_info, allele_idx));
    return rcpp_result_gen;
END_RCPP
}
// find_indelneighbor_idx
Rcpp::IntegerVector find_indelneighbor_idx(Rcpp::StringVector contig, Rcpp::IntegerVector position, Rcpp::IntegerVector indels_idx, int min_dist, Rcpp::IntegerVector indels_size);
RcppExport SEXP _poolfstat_find_indelneighbor_idx(SEXP contigSEXP, SEXP positionSEXP, SEXP indels_idxSEXP, SEXP min_distSEXP, SEXP indels_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type contig(contigSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type position(positionSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indels_idx(indels_idxSEXP);
    Rcpp::traits::input_parameter< int >::type min_dist(min_distSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indels_size(indels_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(find_indelneighbor_idx(contig, position, indels_idx, min_dist, indels_size));
    return rcpp_result_gen;
END_RCPP
}
// compute_snpQ1
Rcpp::NumericVector compute_snpQ1(Rcpp::NumericMatrix refcount, Rcpp::NumericMatrix totcount, Rcpp::NumericVector weight, Rcpp::LogicalVector verbose);
RcppExport SEXP _poolfstat_compute_snpQ1(SEXP refcountSEXP, SEXP totcountSEXP, SEXP weightSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type refcount(refcountSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type totcount(totcountSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_snpQ1(refcount, totcount, weight, verbose));
    return rcpp_result_gen;
END_RCPP
}
// compute_snpQ1rw
Rcpp::NumericVector compute_snpQ1rw(Rcpp::NumericMatrix refcount, Rcpp::NumericMatrix totcount, Rcpp::NumericVector weight, Rcpp::NumericVector sampsize, Rcpp::LogicalVector readcount, Rcpp::LogicalVector verbose);
RcppExport SEXP _poolfstat_compute_snpQ1rw(SEXP refcountSEXP, SEXP totcountSEXP, SEXP weightSEXP, SEXP sampsizeSEXP, SEXP readcountSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type refcount(refcountSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type totcount(totcountSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type sampsize(sampsizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type readcount(readcountSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_snpQ1rw(refcount, totcount, weight, sampsize, readcount, verbose));
    return rcpp_result_gen;
END_RCPP
}
// compute_snpQ2
Rcpp::NumericVector compute_snpQ2(Rcpp::NumericMatrix refcount, Rcpp::NumericMatrix totcount, Rcpp::IntegerMatrix pairs, Rcpp::LogicalVector verbose);
RcppExport SEXP _poolfstat_compute_snpQ2(SEXP refcountSEXP, SEXP totcountSEXP, SEXP pairsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type refcount(refcountSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type totcount(totcountSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type pairs(pairsSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_snpQ2(refcount, totcount, pairs, verbose));
    return rcpp_result_gen;
END_RCPP
}
// compute_snpQ2rw
Rcpp::NumericVector compute_snpQ2rw(Rcpp::NumericMatrix refcount, Rcpp::NumericMatrix totcount, Rcpp::IntegerMatrix pairs, Rcpp::NumericVector sampsize, Rcpp::LogicalVector readcount, Rcpp::LogicalVector verbose);
RcppExport SEXP _poolfstat_compute_snpQ2rw(SEXP refcountSEXP, SEXP totcountSEXP, SEXP pairsSEXP, SEXP sampsizeSEXP, SEXP readcountSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type refcount(refcountSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type totcount(totcountSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type pairs(pairsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type sampsize(sampsizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type readcount(readcountSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_snpQ2rw(refcount, totcount, pairs, sampsize, readcount, verbose));
    return rcpp_result_gen;
END_RCPP
}
// compute_snpHierFstAov
Rcpp::NumericMatrix compute_snpHierFstAov(Rcpp::NumericMatrix refcount, Rcpp::NumericMatrix totcount, Rcpp::IntegerVector hapsize, Rcpp::IntegerVector popgrpidx, Rcpp::LogicalVector verbose);
RcppExport SEXP _poolfstat_compute_snpHierFstAov(SEXP refcountSEXP, SEXP totcountSEXP, SEXP hapsizeSEXP, SEXP popgrpidxSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type refcount(refcountSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type totcount(totcountSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type hapsize(hapsizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type popgrpidx(popgrpidxSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_snpHierFstAov(refcount, totcount, hapsize, popgrpidx, verbose));
    return rcpp_result_gen;
END_RCPP
}
// compute_snpFstAov
Rcpp::NumericMatrix compute_snpFstAov(Rcpp::NumericMatrix refcount, Rcpp::NumericMatrix totcount, Rcpp::IntegerVector hapsize, Rcpp::LogicalVector verbose);
RcppExport SEXP _poolfstat_compute_snpFstAov(SEXP refcountSEXP, SEXP totcountSEXP, SEXP hapsizeSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type refcount(refcountSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type totcount(totcountSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type hapsize(hapsizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_snpFstAov(refcount, totcount, hapsize, verbose));
    return rcpp_result_gen;
END_RCPP
}
// block_sum
Rcpp::NumericVector block_sum(Rcpp::NumericVector stat, Rcpp::IntegerVector snp_bj_id);
RcppExport SEXP _poolfstat_block_sum(SEXP statSEXP, SEXP snp_bj_idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type stat(statSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type snp_bj_id(snp_bj_idSEXP);
    rcpp_result_gen = Rcpp::wrap(block_sum(stat, snp_bj_id));
    return rcpp_result_gen;
END_RCPP
}
// block_sum2
Rcpp::NumericVector block_sum2(Rcpp::NumericVector stat, Rcpp::IntegerMatrix snp_bj_id);
RcppExport SEXP _poolfstat_block_sum2(SEXP statSEXP, SEXP snp_bj_idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type stat(statSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type snp_bj_id(snp_bj_idSEXP);
    rcpp_result_gen = Rcpp::wrap(block_sum2(stat, snp_bj_id));
    return rcpp_result_gen;
END_RCPP
}
// compute_H1
Rcpp::NumericMatrix compute_H1(Rcpp::IntegerMatrix refcount, Rcpp::IntegerMatrix totcount, int nblocks, Rcpp::IntegerVector block_id, Rcpp::LogicalVector verbose);
RcppExport SEXP _poolfstat_compute_H1(SEXP refcountSEXP, SEXP totcountSEXP, SEXP nblocksSEXP, SEXP block_idSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type refcount(refcountSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type totcount(totcountSEXP);
    Rcpp::traits::input_parameter< int >::type nblocks(nblocksSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type block_id(block_idSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_H1(refcount, totcount, nblocks, block_id, verbose));
    return rcpp_result_gen;
END_RCPP
}
// compute_Q2
Rcpp::NumericMatrix compute_Q2(Rcpp::IntegerMatrix refcount, Rcpp::IntegerMatrix totcount, int nblocks, Rcpp::IntegerVector block_id, Rcpp::LogicalVector verbose);
RcppExport SEXP _poolfstat_compute_Q2(SEXP refcountSEXP, SEXP totcountSEXP, SEXP nblocksSEXP, SEXP block_idSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type refcount(refcountSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type totcount(totcountSEXP);
    Rcpp::traits::input_parameter< int >::type nblocks(nblocksSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type block_id(block_idSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_Q2(refcount, totcount, nblocks, block_id, verbose));
    return rcpp_result_gen;
END_RCPP
}
// compute_F3fromF2
Rcpp::NumericMatrix compute_F3fromF2(Rcpp::NumericVector F2val, Rcpp::NumericVector Hval, int npops);
RcppExport SEXP _poolfstat_compute_F3fromF2(SEXP F2valSEXP, SEXP HvalSEXP, SEXP npopsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type F2val(F2valSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Hval(HvalSEXP);
    Rcpp::traits::input_parameter< int >::type npops(npopsSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_F3fromF2(F2val, Hval, npops));
    return rcpp_result_gen;
END_RCPP
}
// compute_F3fromF2samples
Rcpp::NumericMatrix compute_F3fromF2samples(Rcpp::NumericMatrix blockF2, Rcpp::NumericMatrix blockHet, int npops, Rcpp::LogicalVector verbose);
RcppExport SEXP _poolfstat_compute_F3fromF2samples(SEXP blockF2SEXP, SEXP blockHetSEXP, SEXP npopsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type blockF2(blockF2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type blockHet(blockHetSEXP);
    Rcpp::traits::input_parameter< int >::type npops(npopsSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_F3fromF2samples(blockF2, blockHet, npops, verbose));
    return rcpp_result_gen;
END_RCPP
}
// generateF3names
Rcpp::StringMatrix generateF3names(Rcpp::StringVector popnames);
RcppExport SEXP _poolfstat_generateF3names(SEXP popnamesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type popnames(popnamesSEXP);
    rcpp_result_gen = Rcpp::wrap(generateF3names(popnames));
    return rcpp_result_gen;
END_RCPP
}
// compute_F4fromF2
Rcpp::NumericVector compute_F4fromF2(Rcpp::NumericVector F2val, int npops);
RcppExport SEXP _poolfstat_compute_F4fromF2(SEXP F2valSEXP, SEXP npopsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type F2val(F2valSEXP);
    Rcpp::traits::input_parameter< int >::type npops(npopsSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_F4fromF2(F2val, npops));
    return rcpp_result_gen;
END_RCPP
}
// compute_F4fromF2samples
Rcpp::NumericMatrix compute_F4fromF2samples(Rcpp::NumericMatrix blockF2, int npops, Rcpp::LogicalVector verbose);
RcppExport SEXP _poolfstat_compute_F4fromF2samples(SEXP blockF2SEXP, SEXP npopsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type blockF2(blockF2SEXP);
    Rcpp::traits::input_parameter< int >::type npops(npopsSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_F4fromF2samples(blockF2, npops, verbose));
    return rcpp_result_gen;
END_RCPP
}
// compute_F4DfromF2samples
Rcpp::NumericMatrix compute_F4DfromF2samples(Rcpp::NumericMatrix blockF2, Rcpp::NumericMatrix blockDenom, int npops, Rcpp::LogicalVector verbose);
RcppExport SEXP _poolfstat_compute_F4DfromF2samples(SEXP blockF2SEXP, SEXP blockDenomSEXP, SEXP npopsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type blockF2(blockF2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type blockDenom(blockDenomSEXP);
    Rcpp::traits::input_parameter< int >::type npops(npopsSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_F4DfromF2samples(blockF2, blockDenom, npops, verbose));
    return rcpp_result_gen;
END_RCPP
}
// compute_blockDdenom
Rcpp::NumericMatrix compute_blockDdenom(Rcpp::IntegerMatrix refcount, Rcpp::IntegerMatrix totcount, int nblocks, Rcpp::IntegerVector block_id, Rcpp::LogicalVector verbose);
RcppExport SEXP _poolfstat_compute_blockDdenom(SEXP refcountSEXP, SEXP totcountSEXP, SEXP nblocksSEXP, SEXP block_idSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type refcount(refcountSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type totcount(totcountSEXP);
    Rcpp::traits::input_parameter< int >::type nblocks(nblocksSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type block_id(block_idSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_blockDdenom(refcount, totcount, nblocks, block_id, verbose));
    return rcpp_result_gen;
END_RCPP
}
// generateF4names
Rcpp::StringMatrix generateF4names(Rcpp::StringVector popnames);
RcppExport SEXP _poolfstat_generateF4names(SEXP popnamesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type popnames(popnamesSEXP);
    rcpp_result_gen = Rcpp::wrap(generateF4names(popnames));
    return rcpp_result_gen;
END_RCPP
}
// compute_QmatfromF2samples
Rcpp::NumericMatrix compute_QmatfromF2samples(Rcpp::NumericMatrix blockF2, int npops, Rcpp::LogicalVector verbose);
RcppExport SEXP _poolfstat_compute_QmatfromF2samples(SEXP blockF2SEXP, SEXP npopsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type blockF2(blockF2SEXP);
    Rcpp::traits::input_parameter< int >::type npops(npopsSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_QmatfromF2samples(blockF2, npops, verbose));
    return rcpp_result_gen;
END_RCPP
}
// compute_snpQ1onepop
Rcpp::NumericVector compute_snpQ1onepop(Rcpp::NumericVector refcount, Rcpp::NumericVector totcount, double weight);
RcppExport SEXP _poolfstat_compute_snpQ1onepop(SEXP refcountSEXP, SEXP totcountSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type refcount(refcountSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type totcount(totcountSEXP);
    Rcpp::traits::input_parameter< double >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_snpQ1onepop(refcount, totcount, weight));
    return rcpp_result_gen;
END_RCPP
}
// compute_snpQ2onepair
Rcpp::NumericVector compute_snpQ2onepair(Rcpp::NumericVector refcount1, Rcpp::NumericVector refcount2, Rcpp::NumericVector totcount1, Rcpp::NumericVector totcount2);
RcppExport SEXP _poolfstat_compute_snpQ2onepair(SEXP refcount1SEXP, SEXP refcount2SEXP, SEXP totcount1SEXP, SEXP totcount2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type refcount1(refcount1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type refcount2(refcount2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type totcount1(totcount1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type totcount2(totcount2SEXP);
    rcpp_result_gen = Rcpp::wrap(compute_snpQ2onepair(refcount1, refcount2, totcount1, totcount2));
    return rcpp_result_gen;
END_RCPP
}
// simureads_poly
IntegerMatrix simureads_poly(IntegerMatrix y_count, IntegerMatrix n_count, NumericVector lambda, double overdisp, int min_rc, double min_maf, double eps, double eps_exp);
RcppExport SEXP _poolfstat_simureads_poly(SEXP y_countSEXP, SEXP n_countSEXP, SEXP lambdaSEXP, SEXP overdispSEXP, SEXP min_rcSEXP, SEXP min_mafSEXP, SEXP epsSEXP, SEXP eps_expSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type y_count(y_countSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type n_count(n_countSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type overdisp(overdispSEXP);
    Rcpp::traits::input_parameter< int >::type min_rc(min_rcSEXP);
    Rcpp::traits::input_parameter< double >::type min_maf(min_mafSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< double >::type eps_exp(eps_expSEXP);
    rcpp_result_gen = Rcpp::wrap(simureads_poly(y_count, n_count, lambda, overdisp, min_rc, min_maf, eps, eps_exp));
    return rcpp_result_gen;
END_RCPP
}
// simureads_mono
IntegerMatrix simureads_mono(int npos, int npop, NumericVector lambda, double overdisp, int min_rc, double min_maf, double eps);
RcppExport SEXP _poolfstat_simureads_mono(SEXP nposSEXP, SEXP npopSEXP, SEXP lambdaSEXP, SEXP overdispSEXP, SEXP min_rcSEXP, SEXP min_mafSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type npos(nposSEXP);
    Rcpp::traits::input_parameter< int >::type npop(npopSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type overdisp(overdispSEXP);
    Rcpp::traits::input_parameter< int >::type min_rc(min_rcSEXP);
    Rcpp::traits::input_parameter< double >::type min_maf(min_mafSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(simureads_mono(npos, npop, lambda, overdisp, min_rc, min_maf, eps));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_poolfstat_scan_allele_info", (DL_FUNC) &_poolfstat_scan_allele_info, 1},
    {"_poolfstat_extract_vscan_counts", (DL_FUNC) &_poolfstat_extract_vscan_counts, 3},
    {"_poolfstat_extract_nonvscan_counts", (DL_FUNC) &_poolfstat_extract_nonvscan_counts, 4},
    {"_poolfstat_extract_allele_names", (DL_FUNC) &_poolfstat_extract_allele_names, 2},
    {"_poolfstat_find_indelneighbor_idx", (DL_FUNC) &_poolfstat_find_indelneighbor_idx, 5},
    {"_poolfstat_compute_snpQ1", (DL_FUNC) &_poolfstat_compute_snpQ1, 4},
    {"_poolfstat_compute_snpQ1rw", (DL_FUNC) &_poolfstat_compute_snpQ1rw, 6},
    {"_poolfstat_compute_snpQ2", (DL_FUNC) &_poolfstat_compute_snpQ2, 4},
    {"_poolfstat_compute_snpQ2rw", (DL_FUNC) &_poolfstat_compute_snpQ2rw, 6},
    {"_poolfstat_compute_snpHierFstAov", (DL_FUNC) &_poolfstat_compute_snpHierFstAov, 5},
    {"_poolfstat_compute_snpFstAov", (DL_FUNC) &_poolfstat_compute_snpFstAov, 4},
    {"_poolfstat_block_sum", (DL_FUNC) &_poolfstat_block_sum, 2},
    {"_poolfstat_block_sum2", (DL_FUNC) &_poolfstat_block_sum2, 2},
    {"_poolfstat_compute_H1", (DL_FUNC) &_poolfstat_compute_H1, 5},
    {"_poolfstat_compute_Q2", (DL_FUNC) &_poolfstat_compute_Q2, 5},
    {"_poolfstat_compute_F3fromF2", (DL_FUNC) &_poolfstat_compute_F3fromF2, 3},
    {"_poolfstat_compute_F3fromF2samples", (DL_FUNC) &_poolfstat_compute_F3fromF2samples, 4},
    {"_poolfstat_generateF3names", (DL_FUNC) &_poolfstat_generateF3names, 1},
    {"_poolfstat_compute_F4fromF2", (DL_FUNC) &_poolfstat_compute_F4fromF2, 2},
    {"_poolfstat_compute_F4fromF2samples", (DL_FUNC) &_poolfstat_compute_F4fromF2samples, 3},
    {"_poolfstat_compute_F4DfromF2samples", (DL_FUNC) &_poolfstat_compute_F4DfromF2samples, 4},
    {"_poolfstat_compute_blockDdenom", (DL_FUNC) &_poolfstat_compute_blockDdenom, 5},
    {"_poolfstat_generateF4names", (DL_FUNC) &_poolfstat_generateF4names, 1},
    {"_poolfstat_compute_QmatfromF2samples", (DL_FUNC) &_poolfstat_compute_QmatfromF2samples, 3},
    {"_poolfstat_compute_snpQ1onepop", (DL_FUNC) &_poolfstat_compute_snpQ1onepop, 3},
    {"_poolfstat_compute_snpQ2onepair", (DL_FUNC) &_poolfstat_compute_snpQ2onepair, 4},
    {"_poolfstat_simureads_poly", (DL_FUNC) &_poolfstat_simureads_poly, 8},
    {"_poolfstat_simureads_mono", (DL_FUNC) &_poolfstat_simureads_mono, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_poolfstat(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
